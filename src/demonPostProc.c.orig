
/* post-process -- load a saved file, do the stuff */

/* this is the conversion routine to convert from raw data
 * saved to disk by the demon process into the final output
 * data types - snap, timex, variance. stacks are done
 * by the demon directly.
 
 * $Log: postproc.c,v $
 * Revision 1.13  2011/11/10 00:56:53  root
 * added split long ago, updates for format 7 handling dc1394
 *
 * Revision 1.12  2010/11/16 18:48:03  stanley
 * added dark code
 *
 * Revision 1.11  2010/09/12 13:03:44  stanley
 * fixed flags for selected products, detecting deBayer
 *
 * Revision 1.10  2010/06/09 20:16:52  stanley
 * changed process to depend on rawOrder instead of knowing all the cameras
 *
 * Revision 1.9  2010/04/02 19:12:53  stanley
 * mostly format 7 (subimage stuffed into full) changes
 *
 * Revision 1.8  2009/02/20 21:58:22  stanley
 * casted data and ptr to remove sign complaints
 *
 * Revision 1.7  2009/02/20 21:17:02  stanley
 * added dobright, command line options
 *
 * Revision 1.6  2007/08/29 01:07:12  stanley
 * changed raw header format to text
 *
 * Revision 1.5  2006/04/14 23:35:51  stanley
 * added scorpion to debayer list
 *
 * Revision 1.4  2005/08/11 00:12:47  stanley
 * added camera number modifier-- masquerade
 *
 * Revision 1.3  2004/12/17 21:08:35  stanley
 * moved debayer test, added text in image
 *
 * Revision 1.2  2004/12/06 21:50:04  stanley
 * added more cameras to the deBayer list
 *
 * Revision 1.1  2004/03/17 00:56:11  stanley
 * Initial revision
 *
 *
 */


/* added a flag, -P for "products". -Pb says "do brightest". Default
 * is -Pstvb (all four known types). We're also assuming you always
 * do the stv part, so -Pb is the same as -Pstvb. This may change
 * as this code matures.
 */

static char *RCSId = "$Id: postproc.c,v 1.13 2011/11/10 00:56:53 root Exp $";


#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>

#define max(a,b) ((a)>(b) ? (a) : (b))
#define min(a,b) ((a)>(b) ? (b) : (a))
#define stdDev(sum,sq,n) (sqrt((n)*(double)(sq) - (double)(sum)*(double)(sum)) / (n))

double deBayer (struct _pixel_ *, unsigned char *, struct _cameraModule_ *);


int
demonPostProc (struct _diskdata_ *p)
{

     char outSnap[128];
     char outTimex[128];
     char outVar[128];
     char outBright[128];
     char outDark[128];

     int doSplit = 0;
     int doSnap = 1;
     int doTimex = 1;
     int doVar = 1;
     int doBright = 1;
     int doDark = 1;

     struct timeval frameTime;
     struct _imageHeader_ ih;
     long ihsize;               /* old is shorter. */

     unsigned char *data;
     unsigned char *ptr;
     unsigned long *l1ptr;
     unsigned long *l2ptr;
     struct _pixel_ *RGB;
     struct _pixel_ *FullRGB;
     unsigned long fullSize;

     time_t baseEpoch;

     unsigned long inDataBytes;
     unsigned long pixCount;
     unsigned long pixBytes;
     unsigned long i;
     unsigned long frameCount = p->nFrames;

     double lastTime;
     double firstTime;
     double period;

     int j;
     int index;
     int baseIndex;
     int in;
     int count;

     int camnum = -1;
     char line[1024];
     char fullFileName[256];
     char *thisName;
     struct timeval xxstart;
     struct timeval xxend;
     long ltemp;
     int doDeBayer = 0;

     double maxSD = 0;
     int qual = 80;

     char rawOrder[5];
     
     pixCount = p->size;
     inDataBytes = p->size;
     
     strcpy( fullFileName, p->name );
     strcat( fullFileName, "/");
     thisName = &fullFileName[strlen(fullFileName)];
     
     RGB = malloc (pixCount * sizeof (struct _pixel_));
     FullRGB = NULL;
     /* format 7, image area smaller than normal, insert */
     if ((cameraModule.x < cameraModule.cameraWidth)
         || (cameraModule.y < cameraModule.cameraHeight)) {
          fullSize = cameraModule.cameraWidth * cameraModule.cameraHeight;
          FullRGB = calloc (fullSize, sizeof (struct _pixel_));
     }

     baseEpoch = 1 * p->begin;
     frameTime.tv_sec = p->begin;
     frameTime.tv_usec = 0;
     firstTime = p->begin;

     deBayer (RGB, p->snapPtr, &cameraModule);

     if (FullRGB) {
          fprintf ( logFD, "stuffing into full\n");
          baseIndex = 0;
          for (i = cameraModule.top; i < cameraModule.y + cameraModule.top;
               i++) {
               index = i * cameraModule.cameraWidth + cameraModule.left - 1;
               for (j = cameraModule.left;
                    j < cameraModule.x + cameraModule.left; j++) {
                    FullRGB[index++] = RGB[baseIndex++];
               }
          }
     }


     sprintf (thisName, "%d.c%d.snap.jpg",
              baseEpoch, cameraModule.cameraNumber);

     sprintf (line,
              "%-s %-6s %-10s %s%-7s F: %s                     ",
              hotmParams.programVersion,
              "snap",
              hotmParams.sitename,
              ctime (&baseEpoch), getenv ("TZ"), thisName);

     baseEpoch++;

     line[cameraModule.cameraWidth / 8] = 0;

     if (FullRGB)
          insertText (0, FullRGB, line);
     else
          insertText (0, RGB, line);

     sprintf (line,
              "C: %d S: %4d Qual: %3d Gain: %d (%.2fdB) Shutter: %d IntTime: %lf Name: %s                ",
              cameraModule.cameraNumber,
              1,
              80,
              cameraModule.gain,
              cameraModule.realGain,
              cameraModule.shutter,
              cameraModule.intTime, cameraModule.module);
     line[cameraModule.cameraWidth / 8] = 0;

     if (FullRGB) {
          insertText ((cameraModule.cameraHeight / 8 - 1), FullRGB, line);
          if (doSnap)
               save24 (FullRGB, fullFileName, qual);
     }
     else {
          insertText ((cameraModule.y / 8 - 1), RGB, line);
          if (doSnap)
               save24 (RGB, fullFileName, qual);
     }

     if (doSnap)
          fprintf ( logFD, "%.6f (%d.%06d) snap saved %s\n",
                  firstTime, frameTime.tv_sec, frameTime.tv_usec, fullFileName);

     if (p->nFrames == 1) {
          freeAndClear (RGB);
          freeAndClear (FullRGB);
          printf("done with one frames\n");
          return (1);
     }

     if (gettimeofday (&xxstart, NULL))
          perror ("get time start");

     lastTime = 1.0 * frameTime.tv_sec + frameTime.tv_usec / 1000000.0;
     period = (lastTime - firstTime) / (frameCount - 1);

     /* timex. */
     ptr = p->snapPtr;
     l1ptr = p->sumPtr;
     for (i = 1; i < inDataBytes; i++) {
          *ptr++ = *l1ptr++ / frameCount;
     }
     /* special conversion, deBayer the frame  */
     deBayer (RGB, p->snapPtr, &cameraModule);
     if (FullRGB) {
          baseIndex = 0;
          for (i = cameraModule.top; i < cameraModule.y + cameraModule.top;
               i++) {
               index = i * cameraModule.cameraWidth + cameraModule.left - 1;
               for (j = cameraModule.left;
                    j < cameraModule.x + cameraModule.left; j++) {
                    FullRGB[index++] = RGB[baseIndex++];
               }
          }
     }

     sprintf (thisName, "%d.c%d.timex.jpg",
              baseEpoch, cameraModule.cameraNumber);

     sprintf (line,
              "%-s %-6s %-10s %s%-7s F: %s                       ",
              hotmParams.programVersion,
              "timex",
              hotmParams.sitename,
              ctime (&baseEpoch), getenv ("TZ"), thisName);
     baseEpoch++;

     line[cameraModule.cameraWidth / 8] = 0;

     if (FullRGB)
          insertText (0, FullRGB, line);
     else
          insertText (0, RGB, line);

     sprintf (line,
              "C: %d S: %4d Q: %3d Per: %.3f G: %d (%.2fdB) Sh: %d Int: %lf N: %s                 ",
              cameraModule.cameraNumber,
              frameCount,
              qual,
              frameInterval,
              cameraModule.gain,
              cameraModule.realGain,
              cameraModule.shutter,
              cameraModule.intTime, cameraModule.module);
     line[cameraModule.cameraWidth / 8] = 0;


     if (FullRGB) {
          insertText ((cameraModule.cameraHeight / 8 - 1), FullRGB, line);
          if (doTimex)
               save24 (FullRGB, fullFileName, qual);
     }
     else {
          insertText ((cameraModule.cameraHeight / 8 - 1), RGB, line);
          if (doTimex)
               save24 (RGB, fullFileName, qual);
     }

     fprintf ( logFD, "%.6f (%d.%06d) timex saved %s\n",
             firstTime, frameTime.tv_sec, frameTime.tv_usec, fullFileName);


     /* start variance image processing */
     ptr = p->snapPtr;
     l1ptr = p->sumPtr;
     l2ptr = p->sumsqPtr;
     for (i = 1; i < inDataBytes; i++) {
          maxSD = max (maxSD, stdDev (*l1ptr, *l2ptr, frameCount));
          l1ptr++;
          l2ptr++;
     }
     maxSD = 255 / maxSD;
     ptr = p->snapPtr;
     l1ptr = p->sumPtr;
     l2ptr = p->sumsqPtr;
     for (i = 1; i < inDataBytes; i++) {
          *ptr++ = maxSD * stdDev (*l1ptr, *l2ptr, frameCount);
          l1ptr++;
          l2ptr++;
     }
     deBayer (RGB, p->snapPtr, &cameraModule);
     if (FullRGB) {
          baseIndex = 0;
          for (i = cameraModule.top; i < cameraModule.y + cameraModule.top;
               i++) {
               index = i * cameraModule.cameraWidth + cameraModule.left - 1;
               for (j = cameraModule.left;
                    j < cameraModule.x + cameraModule.left; j++) {
                    FullRGB[index++] = RGB[baseIndex++];
               }
          }
     }


     sprintf (thisName, "%d.c%d.var.jpg",
              baseEpoch, cameraModule.cameraNumber);

     sprintf (line,
              "%-s %-6s %-10s %s%-7s F: %s                       ",
              hotmParams.programVersion,
              "stdDev",
              hotmParams.sitename,
              ctime (&baseEpoch), getenv ("TZ"), thisName);

     line[cameraModule.cameraWidth / 8] = 0;

     if (FullRGB) {
          insertText (0, FullRGB, line);
     }
     else {
          insertText (0, RGB, line);
     }


     sprintf (line,
              "C: %d S: %4d Q: %3d Per: %.3f Sc: %.3f G: %d (%.2fdB) S: %d Int: %lf N: %s                    ",
              cameraModule.cameraNumber,
              frameCount,
              qual,
              frameInterval,
              maxSD,
              cameraModule.gain,
              cameraModule.realGain,
              cameraModule.shutter,
              cameraModule.intTime, cameraModule.module);

     line[cameraModule.cameraWidth / 8] = 0;

     if (FullRGB) {
          insertText ((cameraModule.cameraHeight / 8 - 1), FullRGB, line);
          if (doVar)
               save24 (FullRGB, fullFileName, qual);
     }
     else {
          insertText ((cameraModule.cameraHeight / 8 - 1), RGB, line);
          if (doVar)
               save24 (RGB, fullFileName, qual);
     }


     fprintf ( logFD, "%.6f (%d.%06d) var saved %s\n",
             firstTime, frameTime.tv_sec, frameTime.tv_usec, fullFileName);


     baseEpoch++;

     /* bright */

     if (doBright) {

          deBayer (RGB, p->brightPtr, &cameraModule);

          if (FullRGB) {
               baseIndex = 0;
               for (i = cameraModule.top;
                    i < cameraModule.y + cameraModule.top; i++) {
                    index =
                         i * cameraModule.cameraWidth + cameraModule.left - 1;
                    for (j = cameraModule.left;
                         j < cameraModule.x + cameraModule.left; j++) {
                         FullRGB[index++] = RGB[baseIndex++];
                    }
               }
          }


          sprintf (thisName, "%d.c%d.bright.jpg",
                   baseEpoch, cameraModule.cameraNumber);

          sprintf (line,
                   "%-s %-6s %-10s %s%-7s F: %s                   ",
                   hotmParams.programVersion,
                   "bright",
                   hotmParams.sitename,
                   ctime (&baseEpoch), getenv ("TZ"), thisName);

          line[cameraModule.cameraWidth / 8] = 0;

          if (FullRGB) {
               insertText (0, FullRGB, line);
          }
          else {
               insertText (0, RGB, line);
          }

          sprintf (line,
                   "C: %d S: %4d Q: %3d Per: %.3f          G: %d (%.2fdB) S: %d Int: %lf N: %s                   ",
                   cameraModule.cameraNumber,
                   frameCount,
                   qual,
                   frameInterval,
                   cameraModule.gain,
                   cameraModule.realGain,
                   cameraModule.shutter,
                   cameraModule.intTime, cameraModule.module);
          line[cameraModule.cameraWidth / 8] = 0;

          if (FullRGB) {
               insertText ((cameraModule.cameraHeight / 8 - 1), FullRGB,
                           line);
               save24 (FullRGB, fullFileName, qual);
          }
          else {
               insertText ((cameraModule.cameraHeight / 8 - 1), RGB, line);
               save24 (RGB, fullFileName, qual);
          }

          fprintf ( logFD, "%.6f (%d.%06d) bright saved %s\n",
                  firstTime, frameTime.tv_sec, frameTime.tv_usec, fullFileName);

          baseEpoch++;
     }

     if (doDark) {

          deBayer (RGB, p->darkPtr, &cameraModule);

          if (FullRGB) {
               baseIndex = 0;
               for (i = cameraModule.top;
                    i < cameraModule.y + cameraModule.top; i++) {
                    index =
                         i * cameraModule.cameraWidth + cameraModule.left - 1;
                    for (j = cameraModule.left;
                         j < cameraModule.x + cameraModule.left; j++) {
                         FullRGB[index++] = RGB[baseIndex++];
                    }
               }
          }


          sprintf (thisName, "%d.c%d.dark.jpg",
                   baseEpoch, cameraModule.cameraNumber);

          sprintf (line,
                   "%-s %-6s %-10s %s%-7s F: %s                   ",
                   hotmParams.programVersion,
                   "dark",
                   hotmParams.sitename,
                   ctime (&baseEpoch), getenv ("TZ"), thisName);

          line[cameraModule.cameraWidth / 8] = 0;

          if (FullRGB) {
               insertText (0, FullRGB, line);
          }
          else {
               insertText (0, RGB, line);
          }

          sprintf (line,
                   "C: %d S: %4d Q: %3d Per: %.3f          G: %d (%.2fdB) S: %d Int: %lf N: %s                   ",
                   cameraModule.cameraNumber,
                   frameCount,
                   qual,
                   frameInterval,
                   cameraModule.gain,
                   cameraModule.realGain,
                   cameraModule.shutter,
                   cameraModule.intTime, cameraModule.module);
          line[cameraModule.cameraWidth / 8] = 0;

          if (FullRGB) {
               insertText ((cameraModule.cameraHeight / 8 - 1), FullRGB,
                           line);
               save24 (FullRGB, fullFileName, qual);
          }
          else {
               insertText ((cameraModule.cameraHeight / 8 - 1), RGB, line);
               save24 (RGB, fullFileName, qual);
          }

          fprintf ( logFD, "%.6f (%d.%06d) dark saved %s\n",
                  firstTime, frameTime.tv_sec, frameTime.tv_usec, fullFileName);

     }

     if (gettimeofday (&xxend, NULL))
          perror ("get time end");

     fprintf ( logFD, "%d frames over %f seconds ", frameCount, lastTime - firstTime);

     firstTime = 1.0 * xxstart.tv_sec + (xxstart.tv_usec / 1000000.0);
     lastTime = 1.0 * xxend.tv_sec + (xxend.tv_usec / 1000000.0);

     fprintf ( logFD, "processed in %f seconds\n", lastTime - firstTime);

     freeAndClear (RGB);
     freeAndClear (FullRGB);
     fflush (NULL);
}

